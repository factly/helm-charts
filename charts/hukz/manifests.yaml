---
# Source: hukz/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hukz
  namespace: hukz
  labels:
    app.kubernetes.io/name: hukz
    helm.sh/chart: hukz-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: hukz
    app.kubernetes.io/instance: hukz
---
# Source: hukz/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: hukz-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.11
    app.kubernetes.io/instance: hukz
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: hukz
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: hukz
---
# Source: hukz/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: hukz-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.11
    app.kubernetes.io/instance: hukz
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: hukz
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: hukz
    role: primary
---
# Source: hukz/templates/service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: hukz-metrics
  namespace: hukz
  labels:
    app.kubernetes.io/name: hukz
    helm.sh/chart: hukz-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: hukz
    app.kubernetes.io/instance: hukz
spec:
  selector:
    app.kubernetes.io/name: hukz
  type: ClusterIP
  ports:  
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: metrics
---
# Source: hukz/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hukz
  namespace: hukz
  labels:
    app.kubernetes.io/name: hukz
    helm.sh/chart: hukz-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: hukz
    app.kubernetes.io/instance: hukz
spec:
  selector:
    app.kubernetes.io/name: hukz
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
---
# Source: hukz/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hukz
  namespace: hukz
  labels:
    app.kubernetes.io/name: hukz
    helm.sh/chart: hukz-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: hukz
    app.kubernetes.io/instance: hukz
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hukz
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hukz
        helm.sh/chart: hukz-0.1.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: hukz
        app.kubernetes.io/instance: hukz
    spec:
      serviceAccountName: hukz
      securityContext:
        {}
      containers:
        - name: hukz
          securityContext:
            {}
          image: "factly/hukz:0.1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: HUKZ_DATABASE_NAME
              value: hukz
            - name: HUKZ_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: hukz
            - name: HUKZ_DATABASE_HOST
              value: postgres-postgresql.dega.svc.cluster.local
            - name: HUKZ_DATABASE_USER
              value: postgres
            - name: HUKZ_DATABASE_PORT
              value: 5432
            - name: HUKZ_DATABASE_SSL_MODE
              value: disable
            - name: HUKZ_NATS_URL
              value: nats://nats-client.dega.svc.cluster.local:4222
            - name: HUKZ_MODE
              value: development
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            
            - name: metrics
              containerPort: 8001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/alive
              port: 8000
            initialDelaySeconds: 50
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5             
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5             
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: hukz/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hukz-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.3.11
    app.kubernetes.io/instance: hukz
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: hukz
spec:
  serviceName: hukz-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: hukz
      role: primary
  template:
    metadata:
      name: hukz-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.3.11
        app.kubernetes.io/instance: hukz
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: hukz
                    app.kubernetes.io/component: primary
                namespaces:
                  - "hukz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: hukz-postgresql
          image: docker.io/bitnami/postgresql:11.11.0-debian-10-r24
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hukz
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
