---
# Source: umami/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: umami
  namespace: umami
  labels:
    app.kubernetes.io/name: umami
    helm.sh/chart: umami-0.0.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: umami
    app.kubernetes.io/instance: umami
---
# Source: umami/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: umami-postgresql
  namespace: umami
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.8
    app.kubernetes.io/instance: umami
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "Q0hBTkdFX01F"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: umami/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: umami
  namespace: umami
  labels:
    app.kubernetes.io/name: umami
    helm.sh/chart: umami-0.0.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: umami
    app.kubernetes.io/instance: umami
type: Opaque
data:
  postgresql-postgres-password: "bXlzdXBlcnNlY3JldHBAc3N3MHJk"
  postgresql-password: "bXlzdXBlcnNlY3JldHBAc3N3MHJk"
  postgresql-replication-password: "bXlzdXBlcnNlY3JldHBAc3N3MHJk"
---
# Source: umami/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: umami-postgresql-init-scripts
  namespace: umami
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.8
    app.kubernetes.io/instance: umami
    app.kubernetes.io/managed-by: Helm
data:
  create_tables.sql: |
    drop table if exists event;
    drop table if exists pageview;
    drop table if exists session;
    drop table if exists website;
    drop table if exists account;
  
    create table account (
        user_id serial primary key,
        username varchar(255) unique not null,
        password varchar(60) not null,
        is_admin bool not null default false,
        created_at timestamp with time zone default current_timestamp,
        updated_at timestamp with time zone default current_timestamp
    );
  
    create table website (
        website_id serial primary key,
        website_uuid uuid unique not null,
        user_id int not null references account(user_id) on delete cascade,
        name varchar(100) not null,
        domain varchar(500),
        share_id varchar(64) unique,
        created_at timestamp with time zone default current_timestamp
    );
  
    create table session (
        session_id serial primary key,
        session_uuid uuid unique not null,
        website_id int not null references website(website_id) on delete cascade,
        created_at timestamp with time zone default current_timestamp,
        hostname varchar(100),
        browser varchar(20),
        os varchar(20),
        device varchar(20),
        screen varchar(11),
        language varchar(35),
        country char(2)
    );
  
    create table pageview (
        view_id serial primary key,
        website_id int not null references website(website_id) on delete cascade,
        session_id int not null references session(session_id) on delete cascade,
        created_at timestamp with time zone default current_timestamp,
        url varchar(500) not null,
        referrer varchar(500)
    );
  
    create table event (
        event_id serial primary key,
        website_id int not null references website(website_id) on delete cascade,
        session_id int not null references session(session_id) on delete cascade,
        created_at timestamp with time zone default current_timestamp,
        url varchar(500) not null,
        event_type varchar(50) not null,
        event_value varchar(50) not null
    );
  
    create index website_user_id_idx on website(user_id);
  
    create index session_created_at_idx on session(created_at);
    create index session_website_id_idx on session(website_id);
  
    create index pageview_created_at_idx on pageview(created_at);
    create index pageview_website_id_idx on pageview(website_id);
    create index pageview_session_id_idx on pageview(session_id);
    create index pageview_website_id_created_at_idx on pageview(website_id, created_at);
    create index pageview_website_id_session_id_created_at_idx on pageview(website_id, session_id, created_at);
  
    create index event_created_at_idx on event(created_at);
    create index event_website_id_idx on event(website_id);
    create index event_session_id_idx on event(session_id);
  
    insert into account (username, password, is_admin) values ('admin', '$2b$10$BUli0c.muyCW1ErNJc3jL.vFRFtFJWrT8/GcR4A.sUdCznaXiqFXa', true);
---
# Source: umami/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: umami-postgresql-hl
  namespace: umami
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.8
    app.kubernetes.io/instance: umami
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: umami
    app.kubernetes.io/component: primary
---
# Source: umami/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: umami-postgresql
  namespace: umami
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.8
    app.kubernetes.io/instance: umami
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: umami
    app.kubernetes.io/component: primary
---
# Source: umami/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: umami
  namespace: umami
  labels:
    app.kubernetes.io/name: umami
    helm.sh/chart: umami-0.0.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: umami
    app.kubernetes.io/instance: umami
spec:
  selector:
    app.kubernetes.io/name: umami
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
---
# Source: umami/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: umami
  namespace: umami
  labels:
    app.kubernetes.io/name: umami
    helm.sh/chart: umami-0.0.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: umami
    app.kubernetes.io/instance: umami
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: umami
  template:
    metadata:
      labels:
        app.kubernetes.io/name: umami
        helm.sh/chart: umami-0.0.1
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: umami
        app.kubernetes.io/instance: umami
    spec:
      serviceAccountName: umami
      securityContext:
        {}       
      containers:
        - name: umami
          securityContext:
            {}
          image: "ghcr.io/mikecao/umami:postgresql-1e4c3eb"
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_URL
              value: postgres://postgres:CHANGE_ME@umami-postgresql.umami.svc.cluster.local:5432/umami?sslmode=false
            - name: FORCE_SSL
              value: "0"
            - name: LOG_QUERY
              value: "0"
            - name: DISABLE_LOGIN
              value: "0"
            - name: REMOVE_TRAILING_SLASH
              value: "1"
            - name: TRACKER_SCRIPT_NAME
              value: umami
            - name: DATABASE_TYPE
              value: postgresql
            - name: HASH_SALT
              value: "5onqWj8HoEZDXxMPO1PbHnWRJ6zXFgiRFbha4PaoRcUeM9pG1u"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 50
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5             
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5             
          resources:
            {}
---
# Source: umami/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: umami-postgresql
  namespace: umami
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.0.8
    app.kubernetes.io/instance: umami
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: umami-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: umami
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: umami-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.0.8
        app.kubernetes.io/instance: umami
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: umami
                    app.kubernetes.io/component: primary
                namespaces:
                  - "umami"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.1.0-debian-10-r80
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: umami-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "umami"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=umami" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=umami" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: umami-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
