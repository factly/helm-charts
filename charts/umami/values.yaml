# Default values for umami. Installs PostgreSQL and NATS charts if enabled
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: umami
fullnameOverride: umami

## Override the deployment namespace
namespaceOverride: ""

imagePullSecrets: []

name: umami

image:
  repository: ghcr.io/mikecao/umami
  pullPolicy: IfNotPresent
  tag: ""

# This value will be ignored if Autoscaling is enabled
replicaCount: 1

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## See `kubectl explain poddisruptionbudget.spec` for more
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}
  # minAvailable: 1
  # maxUnavailable: 1
  # labels: {}
  # annotations: {}

# If enabled, creates a secret with the name `umami` used in the chart by default 
createSecret: 
  enabled: true
  postgresqlPostgresPassword: mysupersecretp@ssw0rd
  postgresqlPassword: mysupersecretp@ssw0rd
  postgresqlReplicationPassword: mysupersecretp@ssw0rd

## Environment variables to pass to umami
env: 
  # - name: DATABASE_NAME
  #   value: postgres    
  # - name: DATABASE_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: umami
  #       key: postgresql-password
  # - name: DATABASE_HOST
  #   value: umami-postgresql.default.svc.cluster.local 
  # - name: DATABASE_USER
  #   value: postgres        
  # - name: DATABASE_PORT
  #   value: "5432"   
  # - name: DATABASE_SSL_MODE
  #   value: disable  
  - name: DATABASE_URL
    value: postgres://postgres:CHANGE_ME@umami-postgresql.umami.svc.cluster.local:5432/umami?sslmode=false
  # Replace with a random string. If empty or not set, a random seed will be generated automatically.  
  # You can provide a comma-delimited list of IP address to exclude from data collection.
  # - name: IGNORE_IP
  #   value: ""
  # This will redirect all requests from http to https in the Umami application. Note, this does not apply to the tracking script.
  - name: FORCE_SSL
    value: "0"
  # If you are running in development mode, this will log database queries to the console for debugging.
  - name: LOG_QUERY
    value: "0"
  # HTTP header to check for the client's IP address. This is useful when you're behind a proxy that uses non-standard headers.
  # - name: CLIENT_IP_HEADER
  #   value: ""
  # Disables the login page for the application.
  - name: DISABLE_LOGIN
    value: "0"  
  # Removes the trailing slash from all incoming urls. 
  - name: REMOVE_TRAILING_SLASH
    value: "1"
  # Allow you to assign a custom name to the tracker script. The default it umami. If you update this, be sure to update the tracking code on your website to the new name.
  - name: TRACKER_SCRIPT_NAME
    value: "umami"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # Labels to add to the service account
  labels: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "umami"

podAnnotations: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000
  portName: http
  annotations: {}
  labels: {}

metrics:
  enabled: false

  serviceMonitor:
    enabled: false
    selector:
      # prometheus: kube-prometheus
      release: monitoring
    labels: {}
    annotations: {}
    interval: 30s

    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    # nginx.ingress.kubernetes.io/from-to-www-redirect: 'true' 
  ## Hostnames must be provided if Ingress is enabled.
  ## Secrets must be manually created in the namespace
  ##
  hosts:
    - change-to-your-domain.com
    - www.change-to-your-domain.com
  paths:
    - /
  extraPaths: []
  tls:
    - secretName: change-to-your-tls
      hosts:
        - change-to-your-domain.com
        - www.change-to-your-domain.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Readiness and liveness probes for default backend
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  initialDelaySeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  periodSeconds: 10
livenessProbe:
  initialDelaySeconds: 50
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  periodSeconds: 10

nodeSelector: {}

tolerations: []

affinity: {}

postgresql:
  enabled: true

  auth:
    database: "umami"
    postgresPassword: "CHANGE_ME"

  image:
    tag: ""

  ## PostgreSQL password using existing secret
  # existingSecret: umami

  primary:
    initdb:
      scripts:
        # Install the SQL script at the startup. The SQL is copied from here: https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql
        # Needs to be updated accordingly, as the schema changes with the application.
        umami_schema.sql: |
          drop table if exists event;
          drop table if exists pageview;
          drop table if exists session;
          drop table if exists website;
          drop table if exists account;

          create table account (
              user_id serial primary key,
              username varchar(255) unique not null,
              password varchar(60) not null,
              is_admin bool not null default false,
              created_at timestamp with time zone default current_timestamp,
              updated_at timestamp with time zone default current_timestamp
          );

          create table website (
              website_id serial primary key,
              website_uuid uuid unique not null,
              user_id int not null references account(user_id) on delete cascade,
              name varchar(100) not null,
              domain varchar(500),
              share_id varchar(64) unique,
              created_at timestamp with time zone default current_timestamp
          );

          create table session (
              session_id serial primary key,
              session_uuid uuid unique not null,
              website_id int not null references website(website_id) on delete cascade,
              created_at timestamp with time zone default current_timestamp,
              hostname varchar(100),
              browser varchar(20),
              os varchar(20),
              device varchar(20),
              screen varchar(11),
              language varchar(35),
              country char(2)
          );

          create table pageview (
              view_id serial primary key,
              website_id int not null references website(website_id) on delete cascade,
              session_id int not null references session(session_id) on delete cascade,
              created_at timestamp with time zone default current_timestamp,
              url varchar(500) not null,
              referrer varchar(500)
          );

          create table event (
              event_id serial primary key,
              website_id int not null references website(website_id) on delete cascade,
              session_id int not null references session(session_id) on delete cascade,
              created_at timestamp with time zone default current_timestamp,
              url varchar(500) not null,
              event_type varchar(50) not null,
              event_value varchar(50) not null
          );

          create index website_user_id_idx on website(user_id);

          create index session_created_at_idx on session(created_at);
          create index session_website_id_idx on session(website_id);

          create index pageview_created_at_idx on pageview(created_at);
          create index pageview_website_id_idx on pageview(website_id);
          create index pageview_session_id_idx on pageview(session_id);
          create index pageview_website_id_created_at_idx on pageview(website_id, created_at);
          create index pageview_website_id_session_id_created_at_idx on pageview(website_id, session_id, created_at);

          create index event_created_at_idx on event(created_at);
          create index event_website_id_idx on event(website_id);
          create index event_session_id_idx on event(session_id);

          insert into account (username, password, is_admin) values ('admin', '$2b$10$BUli0c.muyCW1ErNJc3jL.vFRFtFJWrT8/GcR4A.sUdCznaXiqFXa', true);
