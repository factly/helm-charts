# Default values for kavach.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: kavach
fullnameOverride: kavach

## Override the deployment namespace
namespaceOverride: dega

imagePullSecrets: []

global:
  image:
    tag: "0.3.4"
    imagePullPolicy: IfNotPresent
  securityContext: {}
    # runAsUser: 999
    # runAsGroup: 999
    # fsGroup: 999

server:
  name: server

  image:
    repository: factly/kavach-server
    pullPolicy: IfNotPresent
    tag: "0.3.4"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to kavach Server
  env:
    # Setup IMGPROXY usage within the cluster
    - name: KAVACH_IMAGEPROXY_URL
      value: "https://images.factly.org"
    - name: KAVACH_MODE
      value: "development"
    - name: KAVACH_KETO_URL
      value: "http://keto.dega.svc.cluster.local:4466"
    - name: KAVACH_DATABASE_HOST
      value: "postgres-postgresql.dega.svc.cluster.local"
    - name: KAVACH_DATABASE_NAME
      value: "kavach"
    - name: KAVACH_DATABASE_PORT
      value: "5432"
    - name: KAVACH_DATABASE_USER
      value: "postgres"
    - name: KAVACH_DATABASE_PASSWORD
      value: "***REMOVED***"
    - name: KAVACH_DATABASE_SSL_MODE
      value: "disable"

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "kavach-server"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  configAnnotations: {}

  service:
    type: ClusterIP
    port: 8000
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8001
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []    

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}
