# Default values for dega.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: dega
fullnameOverride: dega

## Override the deployment namespace
namespaceOverride: dega

imagePullSecrets: []

global:
  image:
    tag: "0.3.12"
    imagePullPolicy: IfNotPresent
  securityContext: {}
    # runAsUser: 999
    # runAsGroup: 999
    # fsGroup: 999

api:
  name: api

  image:
    repository: factly/dega-api
    pullPolicy: IfNotPresent
    tag: "0.3.12"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega API
  env:
    - name: DEGA_API_KAVACH_URL
      value: "http://kavach-server.dega.svc.cluster.local:8000"
    - name: DEGA_API_DATABASE_HOST
      value: "postgres-postgresql.dega.svc.cluster.local"
    - name: DEGA_API_DATABASE_NAME
      value: "dega"
    - name: DEGA_API_DATABASE_PORT
      value: "5432"
    - name: DEGA_API_DATABASE_SSL_MODE
      value: "disable"                 
    - name: DEGA_API_DATABASE_USER
      value: "postgres"
    - name: DEGA_API_DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-api
          key: database_password

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-api"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8000
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8001
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/from-to-www-redirect: 'true'
    ## Dega API Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    ##
    hosts:
      - dega-api.factly.org
      - www.dega-api.factly.org
    paths:
      - /
    extraPaths: []
      # - path: /*
      #   pathType: ImplementationSpecific
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port: 
      #         name: use-annotation
    tls:
      - secretName: dega-api-factly-org-tls
        hosts:
          - dega-api.factly.org
          - www.dega-api.factly.org        

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

server:
  name: server

  image:
    repository: factly/dega-server
    pullPolicy: IfNotPresent
    tag: "0.3.3"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega Server
  env:
    - name: DEGA_MODE
      value: "development"
    - name: DEGA_KAVACH_URL
      value: "http://kavach-server.dega.svc.cluster.local:8000"
    - name: DEGA_MEILI_URL
      value: "http://meilisearch.dega.svc.cluster.local:7700"
    - name: DEGA_MEILI_KEY
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: meili_key
    - name: DEGA_GOOGLE_KEY
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: google_key
    - name: DEGA_IMAGEPROXY_URL
      value: "https://images.factly.org/f"
    - name: DEGA_KETO_URL
      value: "http://keto.dega.svc.cluster.local:4466"
    - name: DEGA_KRATOS_PUBLIC_URL
      value: "http://kratos-public.dega.svc.cluster.local:80"
    - name: DEGA_IFRAMELY_URL
      value: "http://iframely.apps.svc.cluster.local:8061"
    - name: DEGA_DATABASE_HOST
      value: "postgres-postgresql.dega.svc.cluster.local"
    - name: DEGA_DATABASE_NAME
      value: "dega"
    - name: DEGA_DATABASE_PORT
      value: "5432"
    - name: DEGA_DATABASE_SSL_MODE
      value: "disable"                 
    - name: DEGA_DATABASE_USER
      value: "postgres"
    - name: DEGA_DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: database_password
    - name: DEGA_CREATE_SUPER_ORGANISATION
      value: "true"
    - name: DEGA_SUPER_ORGANISATION_TITLE
      value: "Super Organisation"
    - name: DEGA_DEFAULT_NUMBER_OF_MEDIA
      value: "10"
    - name: DEGA_DEFAULT_NUMBER_OF_SPACES
      value: "1"
    - name: DEGA_DEFAULT_NUMBER_OF_POSTS
      value: "10"
    - name: DEGA_DEFAULT_USER_EMAIL
      value: "shashi@factly.in"
    - name: DEGA_DEFAULT_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: default_user_password

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-server"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  configAnnotations: {}

  service:
    type: ClusterIP
    port: 8000
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8001
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []    

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

studio:
  name: studio

  image:
    repository: factly/dega-studio
    pullPolicy: IfNotPresent
    tag: "0.3.3"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega studio
  env: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-studio"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  configAnnotations: {}

  service:
    type: ClusterIP
    port: 80
    portName: http
    annotations: {}
    labels: {}

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

imgproxy:
  enabled: true

  # Default values for Imgproxy.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  nameOverride: imgproxy
  fullnameOverride: imgproxy

  ## Override the deployment namespace
  namespaceOverride: "apps"

  imagePullSecrets: []

  name: imgproxy

  image:
    repository: darthsim/imgproxy
    pullPolicy: IfNotPresent
    tag: "v2.15.0"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Imgproxy
  env:
    # Base URL prefix that will be added to every requested image URL.
    - name: IMGPROXY_BASE_URL
      value: "http://minio.dega.svc.cluster.local:9000/"
    # Enables WebP support detection. 
    - name: IMGPROXY_ENABLE_WEBP_DETECTION
      value: "true"
    # Enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL.
    - name: IMGPROXY_ENFORCE_WEBP
      value: "true"
    # Duration (in seconds) sent in Expires and Cache-Control: max-age HTTP headers.
    - name: IMGPROXY_TTL
      value: "31536000"
    # The maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected. 
    - name: IMGPROXY_MAX_SRC_RESOLUTION
      value: "16.8"
    # The maximum size of the source image, in bytes. Images with larger file size will be rejected. 
    - name: IMGPROXY_MAX_SRC_FILE_SIZE
      value: "104857600"
    # Enables using ETag HTTP header for HTTP cache control. 
    - name: IMGPROXY_USE_ETAG
      value: "true"
    # Prometheus metrics server binding. Can’t be the same as IMGPROXY_BIND
    - name: IMGPROXY_PROMETHEUS_BIND
      value: ":8081"
    # - name: IMGPROXY_JPEG_PROGRESSIVE
    #   value: "true"
    # - name: IMGPROXY_PNG_INTERLACED
    #   value: "true"

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "imgproxy"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8080
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8081
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/from-to-www-redirect: 'true'
      nginx.ingress.kubernetes.io/configuration-snippet: |
        if ($args = '') {
          rewrite ^/f/(.*)$ /insecure/plain/$1? last;
        }
        rewrite ^/f/(.*)$ /insecure/$args/plain/$1? last;    
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    ##
    hosts:
      - images.factly.org
      - www.images.factly.org
    paths:
      - /
    extraPaths: []
    tls:
      - secretName: images-factly-org-tls
        hosts:
          - images.factly.org
          - www.images.factly.org        

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}
