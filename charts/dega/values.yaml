# Default values for dega.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: dega
fullnameOverride: dega

## Override the deployment namespace
namespaceOverride: dega

imagePullSecrets: []


global:
  image:
    tag: "0.4.0"
    imagePullPolicy: IfNotPresent
  securityContext: {}
    # runAsUser: 999
    # runAsGroup: 999
    # fsGroup: 999

api:
  name: api

  image:
    repository: factly/dega-api
    pullPolicy: IfNotPresent
    tag: "0.4.1"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega API
  env:
    - name: DEGA_API_KAVACH_URL
      value: "http://kavach-server.dega.svc.cluster.local:8000"
    - name: DEGA_API_DATABASE_HOST
      value: "postgres-postgresql.dega.svc.cluster.local"
    - name: DEGA_API_DATABASE_NAME
      value: "dega"
    - name: DEGA_API_DATABASE_PORT
      value: "5432"
    - name: DEGA_API_DATABASE_SSL_MODE
      value: "disable"                 
    - name: DEGA_API_DATABASE_USER
      value: "postgres"
    - name: DEGA_API_DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-api
          key: database_password

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-api"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8000
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8001
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/from-to-www-redirect: 'true'
    ## Dega API Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    ##
    hosts:
      - dega-api.factly.org
      - www.dega-api.factly.org
    paths:
      - /
    extraPaths: []
      # - path: /*
      #   pathType: ImplementationSpecific
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port: 
      #         name: use-annotation
    tls:
      - secretName: dega-api-factly-org-tls
        hosts:
          - dega-api.factly.org
          - www.dega-api.factly.org        

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

server:
  name: server

  image:
    repository: factly/dega-server
    pullPolicy: IfNotPresent
    tag: "0.4.4"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega Server
  env:
    - name: DEGA_MODE
      value: "development"
    - name: DEGA_KAVACH_URL
      value: "http://kavach-server.dega.svc.cluster.local:8000"
    - name: DEGA_MEILI_URL
      value: "http://meilisearch.dega.svc.cluster.local:7700"
    - name: DEGA_MEILI_KEY
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: meili_key
    - name: DEGA_GOOGLE_KEY
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: google_key
    - name: DEGA_IMAGEPROXY_URL
      value: "https://images.factly.org/f"
    - name: DEGA_KETO_URL
      value: "http://keto.dega.svc.cluster.local:4466"
    - name: DEGA_KRATOS_PUBLIC_URL
      value: "http://kratos-public.dega.svc.cluster.local:80"
    - name: DEGA_IFRAMELY_URL
      value: "http://iframely.apps.svc.cluster.local:8061"
    - name: DEGA_DATABASE_HOST
      value: "postgres-postgresql.dega.svc.cluster.local"
    - name: DEGA_DATABASE_NAME
      value: "dega"
    - name: DEGA_DATABASE_PORT
      value: "5432"
    - name: DEGA_DATABASE_SSL_MODE
      value: "disable"                 
    - name: DEGA_DATABASE_USER
      value: "postgres"
    - name: DEGA_DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: database_password
    - name: DEGA_CREATE_SUPER_ORGANISATION
      value: "true"
    - name: DEGA_SUPER_ORGANISATION_TITLE
      value: "Super Organisation"
    - name: DEGA_DEFAULT_NUMBER_OF_MEDIA
      value: "10"
    - name: DEGA_DEFAULT_NUMBER_OF_SPACES
      value: "1"
    - name: DEGA_DEFAULT_NUMBER_OF_POSTS
      value: "10"
    - name: DEGA_DEFAULT_USER_EMAIL
      value: "shashi@factly.in"
    - name: DEGA_DEFAULT_USER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: dega-server
          key: default_user_password

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-server"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  configAnnotations: {}

  service:
    type: ClusterIP
    port: 8000
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8001
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []    

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

studio:
  name: studio

  image:
    repository: factly/dega-studio
    pullPolicy: IfNotPresent
    tag: "0.4.3"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Dega studio
  env: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "dega-studio"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  configAnnotations: {}

  service:
    type: ClusterIP
    port: 80
    portName: http
    annotations: {}
    labels: {}

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

imgproxy:
  enabled: false

  # Default values for Imgproxy.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  nameOverride: imgproxy
  fullnameOverride: imgproxy

  ## Override the deployment namespace
  namespaceOverride: "apps"

  imagePullSecrets: []

  name: imgproxy

  image:
    repository: darthsim/imgproxy
    pullPolicy: IfNotPresent
    tag: "v2.15.0"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to Imgproxy
  env:
    # Base URL prefix that will be added to every requested image URL.
    - name: IMGPROXY_BASE_URL
      value: "http://minio.dega.svc.cluster.local:9000/"
    # Enables WebP support detection. 
    - name: IMGPROXY_ENABLE_WEBP_DETECTION
      value: "true"
    # Enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL.
    - name: IMGPROXY_ENFORCE_WEBP
      value: "true"
    # Duration (in seconds) sent in Expires and Cache-Control: max-age HTTP headers.
    - name: IMGPROXY_TTL
      value: "31536000"
    # The maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected. 
    - name: IMGPROXY_MAX_SRC_RESOLUTION
      value: "16.8"
    # The maximum size of the source image, in bytes. Images with larger file size will be rejected. 
    - name: IMGPROXY_MAX_SRC_FILE_SIZE
      value: "104857600"
    # Enables using ETag HTTP header for HTTP cache control. 
    - name: IMGPROXY_USE_ETAG
      value: "true"
    # Prometheus metrics server binding. Can’t be the same as IMGPROXY_BIND
    - name: IMGPROXY_PROMETHEUS_BIND
      value: ":8081"
    # - name: IMGPROXY_JPEG_PROGRESSIVE
    #   value: "true"
    # - name: IMGPROXY_PNG_INTERLACED
    #   value: "true"

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "imgproxy"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 8080
    portName: http
    annotations: {}
    labels: {}

  metrics:
    enabled: true

    service:
      type: ClusterIP
      port: 8081
      portName: metrics
      annotations: {}
      labels: {}

    serviceMonitor:
      enabled: true
      selector:
        # prometheus: kube-prometheus
        release: monitoring
      labels: {}
      interval: 30s

      scheme: http
      tlsConfig: {}
      scrapeTimeout: 30s
      relabelings: []

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/from-to-www-redirect: 'true'
      nginx.ingress.kubernetes.io/configuration-snippet: |
        if ($args = '') {
          rewrite ^/f/(.*)$ /insecure/plain/$1? last;
        }
        rewrite ^/f/(.*)$ /insecure/$args/plain/$1? last;    
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    ##
    hosts:
      - images.factly.org
      - www.images.factly.org
    paths:
      - /
    extraPaths: []
    tls:
      - secretName: images-factly-org-tls
        hosts:
          - images.factly.org
          - www.images.factly.org        

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

minio:
  enabled: false
  
  ## Provide a name in place of minio for `app:` labels
  ##
  nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  fullnameOverride: ""

  ## set kubernetes cluster domain where minio is running
  ##
  clusterDomain: cluster.local

  ## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
  ##
  image:
    repository: minio/minio
    tag: RELEASE.2020-12-03T05-49-24Z
    pullPolicy: IfNotPresent

  ## Set default image, imageTag, and imagePullPolicy for the `mc` (the minio
  ## client used to create a default bucket).
  ##
  mcImage:
    repository: minio/mc
    tag: RELEASE.2020-11-25T23-04-07Z
    pullPolicy: IfNotPresent

  ## Set default image, imageTag, and imagePullPolicy for the `jq` (the JSON
  ## process used to create secret for prometheus ServiceMonitor).
  ##
  helmKubectlJqImage:
    repository: bskim45/helm-kubectl-jq
    tag: 3.1.0
    pullPolicy: IfNotPresent

  ## minio server mode, i.e. standalone or distributed.
  ## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
  ##
  # mode: standalone
  mode: distributed

  ## Additional labels to include with deployment or statefulset
  additionalLabels: []

  ## Additional annotations to include with deployment or statefulset
  additionalAnnotations: []

  ## Additional arguments to pass to minio binary
  extraArgs: []

  ## Update strategy for Deployments
  DeploymentUpdate:
    type: RollingUpdate
    maxUnavailable: 0
    maxSurge: 100%

  ## Update strategy for StatefulSets
  StatefulSetUpdate:
    updateStrategy: RollingUpdate

  ## Pod priority settings
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  priorityClassName: ""

  ## Set default accesskey, secretkey, Minio config file path, volume mount path and
  ## number of nodes (only used for Minio distributed mode)
  ## AccessKey and secretKey is generated when not set
  ## Distributed Minio ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
  ##
  accessKey: ""
  secretKey: ""
  certsPath: "/etc/minio/certs/"
  configPathmc: "/etc/minio/mc/"
  mountPath: "/export"

  ## Use existing Secret that store following variables:
  ##
  ## | Chart var             | .data.<key> in Secret    |
  ## |:----------------------|:-------------------------|
  ## | accessKey             | accesskey                |
  ## | secretKey             | secretkey                |
  ## | gcsgateway.gcsKeyJson | gcs_key.json             |
  ## | s3gateway.accessKey   | awsAccessKeyId           |
  ## | s3gateway.secretKey   | awsSecretAccessKey       |
  ## | etcd.clientCert       | etcd_client_cert.pem     |
  ## | etcd.clientCertKey    | etcd_client_cert_key.pem |
  ##
  ## All mentioned variables will be ignored in values file.
  ## .data.accesskey and .data.secretkey are mandatory,
  ## others depend on enabled status of corresponding sections.
  existingSecret: "minio"

  ## Override the root directory which the minio server should serve from.
  ## If left empty, it defaults to the value of {{ .Values.mountPath }}
  ## If defined, it must be a sub-directory of the path specified in {{ .Values.mountPath }}
  bucketRoot: ""

  # Number of drives attached to a node
  drivesPerNode: 1
  # Number of MinIO containers running
  replicas: 4
  # Number of expanded MinIO clusters
  zones: 1

  ## TLS Settings for Minio
  tls:
    enabled: false
    ## Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
    certSecret: ""
    publicCrt: public.crt
    privateKey: private.key

  ## Trusted Certificates Settings for Minio. Ref: https://docs.minio.io/docs/how-to-secure-access-to-minio-server-with-tls#install-certificates-from-third-party-cas
  ## Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
  ## When using self-signed certificates, remember to include Minio's own certificate in the bundle with key public.crt.
  ## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.
  trustedCertsSecret: ""

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

    ## minio data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    storageClass: ""
    VolumeName: ""
    accessMode: ReadWriteOnce
    size: 10Gi

    ## If subPath is set mount a sub folder of a volume instead of the root of the volume.
    ## This is especially handy for volume plugins that don't natively support sub mounting (like glusterfs).
    ##
    subPath: ""

  ## Expose the Minio service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##

  service:
    type: ClusterIP
    clusterIP: ~
    port: 9000
    nodePort: 32000

    ## List of IP addresses at which the Prometheus server service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []
    #   - externalIp1

    annotations: {}
      # prometheus.io/scrape: 'true'
      # prometheus.io/path:   '/minio/prometheus/metrics'
      # prometheus.io/port:   '9000'

  ## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##

  imagePullSecrets: []
  # - name: "image-pull-secret"

  ingress:
    enabled: false
    labels: {}
      # node-role.kubernetes.io/ingress: platform

    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # kubernetes.io/ingress.allow-http: "false"
      # kubernetes.io/ingress.global-static-ip-name: ""
      # nginx.ingress.kubernetes.io/secure-backends: "true"
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


  ## Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  tolerations: []
  affinity: {}

  ## Add stateful containers to have security context, if enabled MinIO will run as this
  ## user and group NOTE: securityContext is only enabled if persistence.enabled=true
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # Additational pod annotations
  podAnnotations: {}

  # Additional pod labels
  podLabels: {}

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
    limits:
      memory: 4Gi
      cpu: 1

  ## Create a bucket after minio install
  ##
  defaultBucket:
    enabled: true
    ## If enabled, must be a string with length > 0
    name: dega
    ## Can be one of none|download|upload|public
    policy: none
    ## Purge if bucket exists already
    purge: false
    ## set versioning for bucket true|false
    # versioning: false

  ## Create multiple buckets after minio install
  ## Enabling `defaultBucket` will take priority over this list
  ##
  buckets: []
    # - name: bucket1
    #   policy: none
    #   purge: false
    # - name: bucket2
    #   policy: none
    #   purge: false

  ## Additional Annotations for the Kubernetes Batch (make-bucket-job)
  makeBucketJob:
    podAnnotations:
    annotations:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
    resources:
      requests:
        memory: 128Mi

  ## Additional Annotations for the Kubernetes Batch (update-prometheus-secret)
  updatePrometheusJob:
    podAnnotations:
    annotations:
    securityContext:
      enabled: false
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

  s3gateway:
    enabled: false
    replicas: 4
    serviceEndpoint: ""
    accessKey: ""
    secretKey: ""

  ## Use minio as an azure blob gateway, you should disable data persistence so no volume claim are created.
  ## https://docs.minio.io/docs/minio-gateway-for-azure
  azuregateway:
    enabled: false
    # Number of parallel instances
    replicas: 4

  ## Use minio as GCS (Google Cloud Storage) gateway, you should disable data persistence so no volume claim are created.
  ## https://docs.minio.io/docs/minio-gateway-for-gcs

  gcsgateway:
    enabled: false
    # Number of parallel instances
    replicas: 4
    # credential json file of service account key
    gcsKeyJson: ""
    # Google cloud project-id
    projectId: ""

  ## Use minio on NAS backend
  ## https://docs.minio.io/docs/minio-gateway-for-nas

  nasgateway:
    enabled: false
    # Number of parallel instances
    replicas: 4
    # For NAS Gateway, you may want to bind the PVC to a specific PV. To ensure that happens, PV to bind to should have
    # a label like "pv: <value>", use value here.
    pv: ~

  ## Use this field to add environment variables relevant to Minio server. These fields will be passed on to Minio container(s)
  ## when Chart is deployed
  environment: {}
    ## Please refer for comprehensive list https://docs.minio.io/docs/minio-server-configuration-guide.html
    ## MINIO_DOMAIN: "chart-example.local"
    ## MINIO_BROWSER: "off"

  networkPolicy:
    enabled: false
    allowExternal: true

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## Specify the service account to use for the Minio pods. If 'create' is set to 'false'
  ## and 'name' is left unspecified, the account 'default' will be used.
  serviceAccount:
    create: true
    ## The name of the service account to use. If 'create' is 'true', a service account with that name
    ## will be created. Otherwise, a name will be auto-generated.
    name:

  metrics:
    # Metrics can not be disabled yet: https://github.com/minio/minio/issues/7493
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: monitoring
      # namespace: dega
      # interval: 30s
      # scrapeTimeout: 10s

  ## ETCD settings: https://github.com/minio/minio/blob/master/docs/sts/etcd.md
  ## Define endpoints to enable this section.
  etcd:
    endpoints: []
    pathPrefix: ""
    corednsPathPrefix: ""
    clientCert: ""
    clientCertKey: ""

companion:
  enabled: false

  # Default values for companion.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  nameOverride: companion
  fullnameOverride: companion

  ## Override the deployment namespace
  namespaceOverride: ""

  imagePullSecrets: []

  name: companion

  image:
    repository: transloadit/companion
    pullPolicy: IfNotPresent
    tag: "2600b3ed953f15b1b13c8b07383c470343127bda"

  # imagePullSecrets: []

  # This value will be ignored if Autoscaling is enabled
  replicaCount: 1

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  ## Environment variables to pass to kavach web
  env:
    - name: COMPANION_DATADIR
      value: /
    - name: COMPANION_PORT
      value: "3020"
    - name: COMPANION_DOMAIN
      value: companion.factly.org
    - name: COMPANION_PROTOCOL
      value: https
    - name: COMPANION_SELF_ENDPOINT
      value: companion.factly.org
    - name: COMPANION_SECRET
      value: CHANGE_ME
    - name: COMPANION_AWS_ENDPOINT
      value: https://storage.factly.org
    - name: COMPANION_AWS_BUCKET
      value: dega
    - name: COMPANION_AWS_KEY
      value: ***REMOVED***
    - name: COMPANION_AWS_SECRET
      value: CHANGE_ME

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: "companion"

  podAnnotations: {}

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    # type: ClusterIP
    type: NodePort
    port: 3020
    portName: http
    annotations: {}
    labels: {}

  ingress:
    enabled: false
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/from-to-www-redirect: 'true' 
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    ##
    hosts:
      - companion.factly.org
      - www.companion.factly.org
    paths:
      - /
    extraPaths: []
    tls:
      - secretName: companion-factly-org-tls
        hosts:
          - companion.factly.org
          - www.companion.factly.org

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  readinessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10
  livenessProbe:
    initialDelaySeconds: 50
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    periodSeconds: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

meilisearch:
  enabled: false